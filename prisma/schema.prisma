// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  
  @@map("users")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  imageUrl    String?
  downloadUrl String?
  status      ProductStatus @default(DRAFT)
  slug        String        @unique
  category    String?
  tags        String[] // seo tags 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItem[]
  
  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @default(cuid())
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  stripePaymentId String?     @unique
  customerEmail   String
  customerName    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  
  @@map("order_items")
}
